from flask import Flask, request
from pybit.unified_trading import HTTP
import requests
import os

app = Flask(__name__)

# -------- KONFIGURACJA --------
API_KEY = "W3LJVCmbmyTN3mgoOl"
API_SECRET = "JaFt7WrggPhGhzKyexC1ecfaGUHiPhuVLZ7R"
TESTNET = False  # Ustaw na True, je≈õli u≈ºywasz testnetu
DISCORD_WEBHOOK_URL = "https://trading-bot-bybit-9rju.onrender.com/webhook"

SYMBOL = "BTCUSDT"  # ‚úÖ Zmienimy na WIFUSDT, jak ustalimy poprawnƒÖ nazwƒô

# -------- INICJALIZACJA SESSION --------
base_url = "https://api-testnet.bybit.com" if TESTNET else "https://api.bybit.com"
session = HTTP(api_key=API_KEY, api_secret=API_SECRET, endpoint=base_url)


# -------- FUNKCJA WYSY≈ÅANIA WIADOMO≈öCI NA DISCORD --------
def send_to_discord(message):
    payload = {"content": message}
    try:
        requests.post(DISCORD_WEBHOOK_URL, json=payload)
    except Exception as e:
        print(f"Nie uda≈Ço siƒô wys≈Çaƒá na Discord: {e}")


# -------- FUNKCJA OBLICZANIA ILO≈öCI --------
def calculate_qty(symbol):
    try:
        send_to_discord("üîç Rozpoczynam obliczanie ilo≈õci...")

        balance_data = session.get_wallet_balance(accountType="UNIFIED")
        send_to_discord(f"üí∞ Odpowied≈∫ z get_wallet_balance:\n{balance_data}")

        balance_info = balance_data["result"]["list"][0]["coin"]
        usdt = next(c for c in balance_info if c["coin"] == "USDT")
        available_usdt = float(usdt.get("walletBalance", 0))
        trade_usdt = available_usdt * 0.5

        tickers_data = session.get_tickers(category="linear")
        send_to_discord(f"üìà Odpowied≈∫ z get_tickers:\n{tickers_data}")

        # WY≈öWIETL WSZYSTKIE SYMBOLE (debug)
        all_symbols = [item["symbol"] for item in tickers_data["result"]["list"]]
        send_to_discord(f"üìú Lista symboli:\n{all_symbols}")

        price_info = next((item for item in tickers_data["result"]["list"] if item["symbol"] == symbol), None)

        if not price_info:
            send_to_discord(f"‚ö†Ô∏è Symbol {symbol} nie zosta≈Ç znaleziony w tickers.")
            return None

        last_price = float(price_info["lastPrice"])
        qty = round(trade_usdt / last_price, 3)
        send_to_discord(f"‚úÖ Obliczona ilo≈õƒá: {qty} przy cenie {last_price}")
        return qty

    except Exception as e:
        send_to_discord(f"‚ö†Ô∏è B≈ÇƒÖd obliczania ilo≈õci: {e}")
        return None


# -------- ENDPOINT WEBHOOKA --------
@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.get_json()
    action = data.get("action", "").lower()

    if action not in ["buy", "sell"]:
        send_to_discord("‚ö†Ô∏è Nieprawid≈Çowe polecenie. U≈ºyj 'buy' lub 'sell'.")
        return "Invalid action", 400

    qty = calculate_qty(SYMBOL)
    if qty is None:
        return "Failed to calculate qty", 500

    try:
        side = "Buy" if action == "buy" else "Sell"
        order = session.place_order(
            category="linear",
            symbol=SYMBOL,
            side=side,
            orderType="Market",
            qty=qty,
            timeInForce="GoodTillCancel"
        )
        send_to_discord(f"‚úÖ {side.upper()} zlecenie z≈Ço≈ºone: {qty} {SYMBOL}")
        return "OK", 200
    except Exception as e:
        send_to_discord(f"‚ùå B≈ÇƒÖd sk≈Çadania zlecenia: {e}")
        return "Order error", 500


# -------- URUCHOMIENIE APLIKACJI --------
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
